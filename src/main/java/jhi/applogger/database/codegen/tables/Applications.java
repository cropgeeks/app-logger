/*
 * This file is generated by jOOQ.
 */
package jhi.applogger.database.codegen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jhi.applogger.database.codegen.ApptrackerDb;
import jhi.applogger.database.codegen.tables.records.ApplicationsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Applications extends TableImpl<ApplicationsRecord> {

    private static final long serialVersionUID = 1289492724;

    /**
     * The reference instance of <code>apptracker_db.applications</code>
     */
    public static final Applications APPLICATIONS = new Applications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationsRecord> getRecordType() {
        return ApplicationsRecord.class;
    }

    /**
     * The column <code>apptracker_db.applications.id</code>.
     */
    public final TableField<ApplicationsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apptracker_db.applications.app_name</code>.
     */
    public final TableField<ApplicationsRecord, String> APP_NAME = createField("app_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>apptracker_db.applications</code> table reference
     */
    public Applications() {
        this(DSL.name("applications"), null);
    }

    /**
     * Create an aliased <code>apptracker_db.applications</code> table reference
     */
    public Applications(String alias) {
        this(DSL.name(alias), APPLICATIONS);
    }

    /**
     * Create an aliased <code>apptracker_db.applications</code> table reference
     */
    public Applications(Name alias) {
        this(alias, APPLICATIONS);
    }

    private Applications(Name alias, Table<ApplicationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Applications(Name alias, Table<ApplicationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ApptrackerDb.APPTRACKER_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ApplicationsRecord, Integer> getIdentity() {
        return Internal.createIdentity(jhi.applogger.database.codegen.tables.Applications.APPLICATIONS, jhi.applogger.database.codegen.tables.Applications.APPLICATIONS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApplicationsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(jhi.applogger.database.codegen.tables.Applications.APPLICATIONS, "KEY_applications_PRIMARY", jhi.applogger.database.codegen.tables.Applications.APPLICATIONS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApplicationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ApplicationsRecord>>asList(
              Internal.createUniqueKey(jhi.applogger.database.codegen.tables.Applications.APPLICATIONS, "KEY_applications_PRIMARY", jhi.applogger.database.codegen.tables.Applications.APPLICATIONS.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applications as(String alias) {
        return new Applications(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Applications as(Name alias) {
        return new Applications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Applications rename(String name) {
        return new Applications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Applications rename(Name name) {
        return new Applications(name, null);
    }
// @formatter:on
}
